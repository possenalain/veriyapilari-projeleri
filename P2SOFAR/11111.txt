#include <iostream>
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<ctype.h>
using namespace std;

int findspace(string dump);
string trim(string dump);
string yorumlaricikar(string dump);
int kackapi(string dump);

struct eleman
{
    char name;
    int deger;
};

struct kapi
{
    string isim;
    int girissayisi;
    char giris[3];
    char cikis;
    int index;
    int nanosaniye;
};




/*
KOMUTLARIN FONKSYONLARI
*/
void I(struct eleman *initialize,int elemansayisi);
/*
KAPILARIN FONKSIYONLARI
AND 1
NAND 2
OR 3
NOR 4
NOT 5
XOR 6
XNOR 7
*/
int ANDgate(int a,int b)
{
    return(a&&b);
}
int NANDgate(int a,int b)
{
    return(!(a&&b));
}
int ORgate(int a,int b)
{
    return(a||b);
}
int NORgate(int a,int b)
{
    return(!(a||b));
}
int NOTgate(int a)
{
    return(!a);
}
int XORgate(int a,int b)
{
    return(a^b);
}
int XNORgate(int a, int b)
{
    return(!(a^b));
}

int main()
{
    int A[4]= {0,0,1,1};
    int B[4]= {0,1,0,1};
    int position=0;;

    char row[255];
    string komut="";
    string girisler="";
    string cikisler="";
    string kapilar="";

    FILE *devrehandler;
    FILE *degerhandler;
    FILE *baskahandler=NULL;

    devrehandler=fopen("devre.txt","r");

    if(devrehandler==NULL)
    {
        cout<<"\n Devre.txt okunamiyor";
        exit(1);
    }

    string line=fgets(row,255,devrehandler);
    string baskelime;

    int i=0;
    while(row) //GET THE BLANK SPACE
    {
        if(isspace(line[i])||line[i]=='\0')
            break;
        i++;
    }

    baskelime=line.substr(0,i);
    /*
    BASKA DOSYASI DAHIL EDILMISSE
    */
    if(strcasecmp(&baskelime[0],".include")==0)
    {
        baskahandler=fopen("baska_dosya.txt","r");
        if(baskahandler==NULL)
        {
            cout<<"baska_dosyayi acilmiyor";
            exit(1);
        }
    }
    else
    {
        rewind(devrehandler);
    }

    baskelime="";

    /*
    DEVRE DOSYAYI BASKA DOSYAYI OKUNACAK
    SONRA DEGISKENLERI TANIMLANMASI GEREKIR
    VE ILK DEGERLER ATANMASI GEREKIR
    */
    while(fgets(row,255,devrehandler))//DEVRE DOSYASINDAN OKUMA
    {
        line=row;
        line=trim(line);
        int i=0;
        while(1) //GET BLANK SPACE
        {
            if(isspace(line[i]))
                break;
            i++;
        }
        baskelime=line.substr(0,i);
        /*
        GIRIS
        */
        if(strcasecmp(&baskelime[0],".giris")==0)
        {
            girisler+=trim(line.substr(i,line.length()));
        }
        /*
        CIKIS
        */
        if(strcasecmp(&baskelime[0],".cikis")==0)
        {
            cikisler+=trim(line.substr(i,line.length()));
        }
        /*
        KAPI
        */
        if(strcasecmp(&baskelime[0],".kapi")==0)
        {
            kapilar+=trim(line.substr(i,line.length()));
            kapilar+="\n";
        }
        /*
        SONLANDIRMA
        */
        if(strcasecmp(&baskelime[0],".son")==0)
        {
            fclose(devrehandler);
        }
    }

    if(baskahandler!=NULL)
    {
        while(fgets(row,255,baskahandler))//BASKA DOSYASINDAN OKUMA
        {
            line=trim(row);
            baskelime="";
            int i=0;
            while(1) //GET BLANK SPACE
            {
                if(isspace(line[i])||line[i]=='\0')
                    break;
                i++;
            }
            baskelime=line.substr(0,i);
            string temp;
            /*
            GIRIS
            */
            if(strcasecmp(&baskelime[0],".giris")==0)
            {
                girisler+=trim(line.substr(i,line.length()));
            }
            /*
            CIKIS
            */
            if(strcasecmp(&baskelime[0],".cikis")==0)
            {
                cikisler+=trim(line.substr(i,line.length()));
            }
            /*
            KAPI
            */
            if(strcasecmp(&baskelime[0],".kapi")==0)
            {
                kapilar+=trim(line.substr(i,line.length()));
                kapilar+="\n";
            }
            /*
            SONLANDIRMA
            */
            if(strcasecmp(&baskelime[0],".son")==0)
            {
                fclose(baskahandler);
            }
        }
    }

    /*
    DEVRE DOSYAYI BASKA DOSYAYI OKUNDU
    DEGISKENLERI TANIMLANMASI GEREKIR
    ILK DEGERLER ATANMASI GEREKIR

    GIRISLER
    CIKISLER
    KAPILAR

    */

    cout<<girisler<<"\n\n";
    cout<<cikisler<<"\n\n";
    cout<<kapilar<<"\n\n";

    /*
    */
    string giriscikis="";
    char *token;
    const char delimiter[2]="\t";
    token = strtok(&girisler[0], delimiter);
    /* walk through other tokens */
    while( token != NULL )
    {
        int i=0,vardi=0;
        char temp=token[0];
        while(giriscikis[i])
        {
            if(giriscikis[i]==temp)
            {
                vardi=1;
                break;
            }
            i++;
        }
        if(vardi==0)
        {
            giriscikis+=temp;
        }
        token = strtok(NULL, delimiter);
    }

    token = strtok(&cikisler[0], delimiter);
    /* walk through other tokens */
    while( token != NULL )
    {
        int i=0,vardi=0;
        char temp=token[0];
        while(giriscikis[i])
        {
            if(giriscikis[i]==temp)
            {
                vardi=1;
                break;
            }
            i++;
        }
        if(vardi==0)
        {
            giriscikis+=temp;
        }
        token = strtok(NULL, delimiter);
    }

    /*


    KAPILARI DA OKU VE PROGRAMA YUKLE SONRA
    ELEMANLARIN STRUCT EKLE
    VE ILK DEGERLERINI BELIRLE



    */

    int kapisayisi=kackapi(kapilar);
    struct kapi devrekapi[kapisayisi];
    token = strtok(&kapilar[0], "\n");
    i=0;
    /* WALK THROUGH THE OTHER TOKENS */
    string sprinted="";
    while( token != NULL )
    {
        string temp=token;
        int tokenlength=temp.length();
        char *where=&token[tokenlength+1];
        char *templine=strtok(&temp[0],"\t, ");

        while(templine!=NULL)
        {
            sprinted+=templine;
            sprinted+=" ";
            templine=strtok(NULL,"\t, ");
        }
        char spritemp[100];
        strcpy(spritemp,&sprinted[0]);
        char name[5];
        int gs,d;
        char ck,g0,g1,g2;
        char m=sprinted[findspace(spritemp)+1];
        int kacgiris=atoi(&m);

        //KNOW HOW MANY ENTRIES DOES A GATE HAVE;
        if(kacgiris==2)
        {
            sscanf(spritemp," %s %d  %c %c %c %d",name,&gs,&ck,&g0,&g1,&d);
            devrekapi[i].giris[2]=' ';
        }
        else if(kacgiris==3)
        {
            sscanf(spritemp," %s %d  %c %c %c %c %d",name,&gs,&ck,&g0,&g1,&g2,&d);
            devrekapi[i].giris[2]=g2;
        }
        else
        {
            cout<<"\n\nverilimis girislerinde uyusmazlik var";
            exit(1);
        }
        devrekapi[i].isim=name;
        devrekapi[i].girissayisi=gs;
        devrekapi[i].cikis=ck;
        devrekapi[i].giris[0]=g0;
        devrekapi[i].giris[1]=g1;
        devrekapi[i].nanosaniye=d;
        sprinted="";
        token = strtok(where,"\n");
        i++;
    }
//ADD ELEMENTS TO GIRISCIKIS DEGISKENI
    for(i=0; i<kapisayisi; i++)
    {
        int j=0;
        while(j<devrekapi[i].girissayisi)
        {
            int t=0,vardi=0;
            char temp=devrekapi[i].giris[j];
            while(giriscikis[t])
            {
                if(giriscikis[t]==temp)
                {
                    vardi=1;
                    break;
                }
                t++;
            }
            if(vardi==0)
            {
                giriscikis+=temp;
            }
            j++;
        }
    }
    /*

    */


    struct eleman devre1[giriscikis.length()];
    for(i=0; i<giriscikis.length(); i++)
    {
        devre1[i].name=giriscikis[i];
    }

    /*
    I KOMUTU TAMAM OLAMAK UZERE
    */
    I(devre1,giriscikis.length());
    for(i=0; i<giriscikis.length(); i++)
    {
        cout<<"\n"<<devre1[i].name<<"  ~  "<<devre1[i].deger;
    }
    /*

    */

    /*
    KOMUTLARI ALMA
    */
    do
    {
        cout<<"\n>";
        cin>>komut;

    }
    while("C"!=komut);




    return 0;
}
int findspace(string dump)
{
    /*
    BOSLUK YERI OGRENME FONKSYONU
    */
    int position=0;
    while(1)
    {
        if(isspace(dump[position])||dump[position]=='\t')
            break;

        else
        {
            position++;
        }

        if(dump[position]=='\0')
            break;
    }
    return position;
}

string trim(string dump)
{
    dump=yorumlaricikar(dump);
    dump+="\t";
    int i=0,j=dump.length()-1;
    while(1)
    {
        if(isspace(dump[i]))
        {
            i++;
        }
        else
            break;
    }
    while(1)
    {
        if(isspace(dump[j]))
        {
            j--;
        }
        else
            break;
    }
    return dump.substr(i,j+1);
}
string yorumlaricikar(string dump)
{
    int i=0;
    while(1)
    {
        if((dump[i]!='#')&&dump[i]!='\0')
            i++;
        else
            break;
    }
    return dump.substr(0,i);
}
int kackapi(string dump)
{
    int i=0;
    int kac=0;
    while(1)
    {
        if(dump[i]=='\n')
            kac++;
        if((dump[i]=='\n')&&(dump[i-1]=='\n'))
            kac--;
        if(dump[i]=='\0')
            break;
        i++;
    }
    return kac;
}

/*
KOMUT FONKSIYONLARI
*/

void I(struct eleman *initialize,int elemansayisi)
{
    FILE *degerhandler;
    degerhandler=fopen("deger.txt","r");
    if(degerhandler==NULL)
    {
        cout<<"deger.txt dosyasi okunmadi";
        getchar();
        exit(1);
    }
    string line;
    char row[10];
    char bashalf;
    int i;
    while(fgets(row,5,degerhandler))//DEGER DOSYASINDAN OKUMA
    {
        line=row;
        line=yorumlaricikar(line);
        line=trim(line);
        char elmn;
        int deger;
        sscanf(row,"%c %d",&elmn,&deger);
        i=0;
        while(i<elemansayisi)
        {
            if(initialize[i].name==elmn)
            {
                initialize[i].deger=deger;
            }
            i++;
        }
    }
    fclose(degerhandler);
}

/*BUTUN KOMUTLARIN
FONKSIYONLARI YAZ
VE KENDILERINE AIT OLAN DOSYALARA KAYDETME ISLEMLELI YAP
*/
